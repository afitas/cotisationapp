#!/bin/bash

echo "üöÄ Configuration de l'environnement backend..."

# V√©rification des pr√©requis
command -v python3 >/dev/null 2>&1 || { echo "‚ùå Python 3 est requis mais n'est pas install√©."; exit 1; }
command -v psql >/dev/null 2>&1 || { echo "‚ùå PostgreSQL est requis mais n'est pas install√©."; exit 1; }

# Configuration des variables
DB_NAME="cotisation_db"
DB_USER="cotisation_user"
DB_PASSWORD="secure_password"

# Cr√©ation de l'environnement virtuel Python
echo "üì¶ Cr√©ation de l'environnement virtuel..."
python3 -m venv venv
source venv/bin/activate

# Installation des d√©pendances
echo "üì• Installation des d√©pendances Python..."
pip install --upgrade pip
pip install -r requirements.txt

# Configuration de la base de donn√©es PostgreSQL
echo "üóÑÔ∏è Configuration de la base de donn√©es..."
if psql -lqt | cut -d \| -f 1 | grep -qw $DB_NAME; then
    echo "La base de donn√©es existe d√©j√†"
else
    psql -U postgres -c "CREATE DATABASE $DB_NAME;"
    psql -U postgres -c "CREATE USER $DB_USER WITH PASSWORD '$DB_PASSWORD';"
    psql -U postgres -c "GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USER;"
fi

# Configuration du fichier .env
echo "‚öôÔ∏è Configuration des variables d'environnement..."
if [ ! -f .env ]; then
    cp .env.example .env
    sed -i "s/your-secret-key/$(openssl rand -hex 32)/" .env
    sed -i "s/your-jwt-secret/$(openssl rand -hex 32)/" .env
fi

# Migrations Django
echo "üîÑ Application des migrations..."
python manage.py makemigrations
python manage.py migrate

# Cr√©ation du superuser
echo "üë§ Cr√©ation du super utilisateur..."
python manage.py createsuperuser

echo "‚úÖ Configuration backend termin√©e!" 